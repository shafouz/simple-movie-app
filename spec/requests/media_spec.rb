require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/media", type: :request do
  # Medium. As you add validations to Medium, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:medium)
  }

  let(:invalid_attributes) {
    attributes_for(:medium, name: nil)
  }

  describe "GET /index" do
    it "renders a successful response" do
      Medium.create! valid_attributes
      get media_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      medium = Medium.create! valid_attributes
      get medium_url(medium)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_medium_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      medium = Medium.create! valid_attributes
      get edit_medium_url(medium)
      expect(response).to be_successful
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested medium" do
      medium = Medium.create! valid_attributes
      expect {
        delete medium_url(medium)
      }.to change(Medium, :count).by(-1)
    end

    it "redirects to the media list" do
      medium = Medium.create! valid_attributes
      delete medium_url(medium)
      expect(response).to redirect_to(media_url)
    end
  end
end
